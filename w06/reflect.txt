///////////////////////////////////////////////////////////////////////////
                               Reflection
                             Workshop - #6
Full Name  : Chia-Yu Chien
Student ID#: 157049222
Email      : cchien8@myseneca.ca
Section    : NCC

Authenticity Declaration:
I declare this submission is the result of my own work and has not been
shared with any other student or 3rd party content provider. This submitted
piece of work is entirely of my own creation.
///////////////////////////////////////////////////////////////////////////

1. Arrays that are arranged in parallel to store different data types are called "parallel arrays". 
In Part-2 of the workshop, I used parallel arrays to store the costs, priorities, and the finanace options. 
This approach allows for easy access and manipulation of related data.

2. The `for` loop is the most convenient iteration construct to se with arrays due to its ability to iterate 
through array indices.

As the given example below,
```
int i = 0;
for (i = 0; i < forecastItems; i++)
{
  printf("%3d  %5d    %5c    %11.2lf\n", i + 1,
        importances[i], finOptions[i], costs[i]);
}
```
We can rewrite the same logic applying another iteration construct below,
```
int i = 0;
while(i<forcastItems){
  printf("%3d  %5d    %5c    %11.2lf\n", i + 1,
        importances[i], finOptions[i], costs[i]);
  i++;
}
In summary, both constructs achieve the same result, but the for loop is more concise and directly 
expresses the intent of iterating over an array.

3. For testing, I ran the program with various input scenarios to ensure it behaved as expected.
For debugging, I relied on compiler error messages to locate the issues, which pointed the 
"syntax error" on the exact line number and the problem. Besides, I used `printf` statements to 
print the values of variables to trace the flow of execution and identify where the logic deviated 
from the expected behavior.
