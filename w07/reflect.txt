///////////////////////////////////////////////////////////////////////////
                               Reflection
                             Workshop - #7
Full Name  : Chia-Yu Chien
Student ID#: 157049222
Email      : cchien8@myseneca.ca
Section    : NCC

Authenticity Declaration:
I declare this submission is the result of my own work and has not been
shared with any other student or 3rd party content provider. This submitted
piece of work is entirely of my own creation.
///////////////////////////////////////////////////////////////////////////

1. 
  a.
    struct PlayerInfo
    {
        int lives;
        char ch;
        int treasures;
        int pastPositions[MAX_PATH_LENGTH];
    };

    struct GameInfo
    {
        int remainingMove;
        int pathLength;
        int bombPlacements[MAX_PATH_LENGTH];
        int treasurePlacements[MAX_PATH_LENGTH];
    };
  b.
    struct PlayerInfo player = {};
    struct GameInfo game = {};

  I would revise that into the code below if not using struct,

  int playerLiver;
  char playerChar;
  int playerTreasures;
  int playerPastPositions[MAX_PATH_LENGTH];

  int gameRemainingMove;
  int gamePathLength;
  int gameBombPlacements[MAX_PATH_LENGTH];
  int gameTreasurePlacements[MAX_PATH_LENGTH];

2. 
  Parallel arrays are utilized in the pastPositions member of the PlayerInfo structure, 
as well as the bombPlacements and treasurePlacements members of the GameInfo structure. 
  The corresponding indices in these parallel arrays represent the same position on the game 
map, allowing us to access related data using a single index.

3. 
  The example below is the deepest nested statement in my part-2 code at line 250,

while (game.remainingMove > 0 && player.lives > 0)
{
  int choseMove = -1;
  int repeat = 0;
  flag = 1;
  do
  {
      printf("Next Move [1-20]: ");
      scanf("%d", &choseMove);
      // user choose move start from 1, should minus one for stardard
      choseMove--;
      if (choseMove < 0 || choseMove >= game.pathLength)
      {
          printf("  Out of Range!!!\n");
      }
      // If user choose move has been made before
      else if (player.pastPositions[choseMove])
      {
          flag = 0;
          repeat = 1;
      }
      else
      {
          flag = 0;
          player.pastPositions[choseMove] = 1;
      }
  } while (flag);
  ...
}

  The outermost layer is a while loop to determine if the game should continue. As long 
as the remaining moves are greater than zero and the player still has lives left, the game 
can continue on. 
  And the nested innter layer is do-while loop is to let the user make their move for each 
round of the game. It validates the chosen move to ensure it is within the allowable range 
and has not been chosen previously.
