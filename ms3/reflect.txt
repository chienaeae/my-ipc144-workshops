///////////////////////////////////////////////////////////////////////////
                               Reflection
                             Milestone - #3
Full Name  : Chia-Yu Chien
Student ID#: 157049222
Email      : cchien8@myseneca.ca
Section    : NCC

Authenticity Declaration:
I declare this submission is the result of my own work and has not been
shared with any other student or 3rd party content provider. This submitted
piece of work is entirely of my own creation.
///////////////////////////////////////////////////////////////////////////

1. 
    First, I used size = strlen(temp); in Milestone 2. Using this library function, I don't 
need to manually calculate the length of a string, which improves readability and 
straightforwardness of the code. Additionally, this function is helpful for iterating over 
each character in a C string, reducing the risk of buffer overflow errors that often occur 
when accessing each char element within the C string or during manual length calculations.

    Second, I used strcpy(patient->name, name); to copy a C string into the name field of 
my Patient struct. With this library function, I don't have to worry about buffer size or 
the null-terminating character. Moreover, its type safety and memory allocation behind the 
scenes reduce the complexity of memory manipulation and the potential for bugs, further 
simplifying the codebase.

2. 
    The functions in question are strcpy() and strncpy(). The preferred one is strncpy() due to 
its added safety feature in handling buffer overflows. strncpy() allows for the declaration of 
buffer size, limiting the copied characters to the size of the destination string. In contrast, 
strcpy() doesnâ€™t check the size of the destination buffer, leading to possible buffer overflows 
when the source string is larger than the destination.

    In my code, I used strncpy(phone->description, "CELL", sizeof(phone->description) - 1); to 
copy the source string "CELL" into phone->description. I declared the size to be as large as 
phone->description. The size of patient->name minus one ensures there is space left for a 
null-terminator if the source string is larger than the buffer of phone->description.

    Overall, by using strncpy(), we can prevent buffer overflows. Additionally, it offers more 
flexibility, allowing developers to decide how many characters should be copied from the source 
string, a feature strcpy() does not provide.

3. 
    To ensure the appointment list is always in ascending order based on the date and time of the 
appointment, I implemented a bubble sort function dedicated to sorting the appointment list. I 
also sort the list after importing appointments or adding any new appointment. The function used 
to sort the list is bubbleSortAppointments(), which utilizes both dateCmp() and timeCmp() to 
determine the sorting order.

    For checking the date and time together, here is a snippet of code. I multiplied the date 
comparison result by a larger base to prioritize the date over the time:
```
    struct Appointment prev = appointments[i - 1];
    struct Appointment curr = appointments[i];

    int c = dateCmp(prev.date, curr.date) * 10;
    c += timeCmp(prev.time, curr.time);
```

    Although bubble sort is relatively easier to implement, it lacks performance efficiency. We 
could substitute quick sort for bubble sort in the sorting mechanism. Additionally, implementing 
lazy sorting, where we have a boolean sorted status for the list, could improve efficiency. With 
this approach, the list wouldn't need to be sorted at every insertion but simply change the sorted 
status to false. Then, we check this status before displaying the list. We only sort it once the 
sorted status is false and needs to be displayed. That could reduce the frequency of sorting the list.