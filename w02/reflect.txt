///////////////////////////////////////////////////////////////////////////
                              Reflection
                          Workshop - #2 (P2)
Full Name  : Chia-Yu Chien
Student ID#: 157049222
Email      : cchien8@myseneca.ca
Section    : NCC

Authenticity Declaration:

I declare this submission is the result of my own work and has not been
shared with any other student or 3rd party content provider. This submitted
piece of work is entirely of my own creation.
///////////////////////////////////////////////////////////////////////////

1. The postfix operator ++ uses the original value to the expression, and then changes the operand's value. 
In the other words, the postfix changes the value after using it.

2. Both price1 and price3, which are declared as float, might face precision issues when representing decimal numbers, leading to 
inaccuracies when converting to cents. 
Unlike price2 and price4, which are declared as double and generally offer better precision.

3. The statement `printf("1. $%.2lf\n", money / 100)` performs an intger division, and intger division will truncates any decimal part. 
Due to the format specifier `%lf` which is supposed to be passed with dicimal, the result implicitly coerced to a double for printing.
The statement `printf("2. $%d\n", money / 100);` also performs an integer division. The result is correctly matched with the %d format 
specifier for an integer.
The statement `printf("3. $%.2lf\n", (double)money / 100);` in which `(double)money` explicitly casts money to a double before the division, 
performs a floating-point division. The printing result is formatted as a double with two decimal places.
The statement `printf("4. $%d\n", (double)money / 100);` has a problem that `money` is cast to a double but the format specifier uses `%d`. 
Due to this reason, this will print an unexpected result.
 